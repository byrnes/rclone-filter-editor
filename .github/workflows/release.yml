name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - master
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: windows
            goarch: amd64
            suffix: .exe
          - goos: windows
            goarch: arm64
            suffix: .exe
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        go build -o dist/rclone-filter-editor-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} .
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rclone-filter-editor-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/rclone-filter-editor-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true
        tag_name: ${{ github.ref_type == 'tag' && github.ref_name || format('latest-{0}', github.sha) }}
        name: ${{ github.ref_type == 'tag' && github.ref_name || format('Latest Build ({0})', github.sha) }}
        prerelease: ${{ github.ref_type != 'tag' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}